{
  "paragraphs": [
    {
      "text": "%md\n## Creation of RDD from Data\nDans ce notebook nous allons charger les données dans des RDD",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.963",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCreation of RDD from Data\u003c/h2\u003e\n\u003cp\u003eDans ce notebook nous allons charger les données dans des RDD\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213962_273515256",
      "id": "20181212-102323_67420128",
      "dateCreated": "2019-01-22 13:30:13.962",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Les fichiers sont stockés compressés, on a besoin d\u0027un bout de code pour les décompresser en parallel sur les workers au fur et a mesure qu\u0027on les lit depuis S3:",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.966",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLes fichiers sont stockés compressés, on a besoin d\u0026rsquo;un bout de code pour les décompresser en parallel sur les workers au fur et a mesure qu\u0026rsquo;on les lit depuis S3:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213966_1861202989",
      "id": "20181212-102329_808049084",
      "dateCreated": "2019-01-22 13:30:13.966",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\n\ndef RDDDownloader(fileName: String): org.apache.spark.rdd.RDD[String] \u003d \n{\n    val resultRDD \u003d sc.binaryFiles(fileName). // charger quelques fichers via une regex\n    flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) \u003d\u003e\n          val zis \u003d new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ !\u003d null).\n                flatMap { _ \u003d\u003e\n                    val br \u003d new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ !\u003d null)\n                }\n    }\n    return resultRDD\n}\n// Export Events\nval eventsRDD \u003d RDDDownloader(\"/media/storage/gdelt/12/2018120*.export.CSV.zip\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.967",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nRDDDownloader: (fileName: String)org.apache.spark.rdd.RDD[String]\neventsRDD: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[1] at flatMap at \u003cconsole\u003e:33\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213966_-733507095",
      "id": "20171217-232457_1732696781",
      "dateCreated": "2019-01-22 13:30:13.966",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val cachedEvents \u003d eventsRDD.cache // RDD",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.967",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "cachedEvents: eventsRDD.type \u003d MapPartitionsRDD[1] at flatMap at \u003cconsole\u003e:33\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213967_591921937",
      "id": "20190107-102856_946427568",
      "dateCreated": "2019-01-22 13:30:13.967",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class Event(GLOBALEVENTID: Int,\nSQLDATE: String,\nMonthYear: String,\nYear: Int,\nFractionDate: Double,\nActor1Code: String,\nActor1Name: String,\nActor1CountryCode: String,\nActor1KnownGroupCode: String,\nActor1EthnicCode: String,\nActor1Religion1Code: String,\nActor1Religion2Code: String,\nActor1Type1Code: String,\nActor1Type2Code: String,\nActor1Type3Code: String,\nActor2Code: String,\nActor2Name: String,\nActor2CountryCode: String,\nActor2KnownGroupCode: String,\nActor2EthnicCode: String,\nActor2Religion1Code: String,\nActor2Religion2Code: String,\nActor2Type1Code: String,\nActor2Type2Code: String,\nActor2Type3Code: String,\nIsRootEvent: Int,\nEventCode: String,\nEventBaseCode: String,\nEventRootCode: String,\nQuadClass: Int,\nGoldsteinScale: Double,\nNumMentions: Int,\nNumSources: Int,\nNumArticles: Int,\nAvgTone: Double,\nActor1Geo_Type: Int,\nActor1Geo_FullName: String,\nActor1Geo_CountryCode: String,\nActor1Geo_ADM1Code: String,\nActor1Geo_ADM2Code: String,\nActor1Geo_Lat: Double,\nActor1Geo_Long: Double,\nActor1Geo_FeatureID: String,\nActor2Geo_Type: Int,\nActor2Geo_FullName: String,\nActor2Geo_CountryCode: String,\nActor2Geo_ADM1Code: String,\nActor2Geo_ADM2Code: String,\nActor2Geo_Lat: Double,\nActor2Geo_Long: Double,\nActor2Geo_FeatureID: String,\nActionGeo_Type: Int,\nActionGeo_FullName: String,\nActionGeo_CountryCode: String,\nActionGeo_ADM1Code: String,\nActionGeo_ADM2Code: String,\nActionGeo_Lat: Double,\nActionGeo_Long: Double,\nActionGeo_FeatureID: String,\nDATEADDED: String,\nSOURCEURL: String)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.968",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class Event\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213967_1830667968",
      "id": "20190107-095023_1048093380",
      "dateCreated": "2019-01-22 13:30:13.967",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import java.text.SimpleDateFormat\n\ndef toDouble(s : String): Double \u003d if (s.isEmpty) 0 else s.toDouble\ndef toInt(s : String): Int \u003d if (s.isEmpty) 0  else s.toInt\ndef toBigInt(s : String): BigInt \u003d if (s.isEmpty) BigInt(0) else BigInt(s)\n \nval inputFormat_ymd \u003d new SimpleDateFormat(\"yyyyMMdd\")\nval outputFormat_ymd \u003d new SimpleDateFormat(\"yyyy-MM-dd\")\n\nval inputFormat_ym \u003d new SimpleDateFormat(\"yyyyMM\")\nval outputFormat_ym \u003d new SimpleDateFormat(\"yyyy-MM\")\n\nval inputFormat_ymdhms \u003d new SimpleDateFormat(\"yyyyMMddhhmmss\")\nval outputFormat_ymdhms \u003d new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\n    \ndef parse_date(s : String, inputFormat : SimpleDateFormat, outputFormat : SimpleDateFormat):\n    String \u003d if (s.isEmpty) s else  outputFormat.format(inputFormat.parse(s))   \n\n\ncachedEvents.map(_.split(\"\\t\")).filter(_.length\u003d\u003d61).map(\n    e\u003d\u003e Event(\n        toInt(e(0)),parse_date(e(1), inputFormat_ymd, outputFormat_ymd),parse_date(e(2), inputFormat_ym, outputFormat_ym),toInt(e(3)),toDouble(e(4)),e(5),e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(17),e(18),e(19),e(20),\n        e(21),e(22),e(23),e(24),toInt(e(25)),e(26),e(27),e(28),toInt(e(29)),toDouble(e(30)),toInt(e(31)),toInt(e(32)),toInt(e(33)),toDouble(e(34)),toInt(e(35)),e(36),e(37),e(38),e(39),toDouble(e(40)),\n        toDouble(e(41)),e(42),toInt(e(43)),e(44),e(45),e(46),e(47),toDouble(e(48)),toDouble(e(49)),e(50),toInt(e(51)),e(52),e(53),e(54),e(55),toDouble(e(56)),toDouble(e(57)),e(58),parse_date(e(59),inputFormat_ymdhms, outputFormat_ymdhms),e(60))\n\n).toDS.createOrReplaceTempView(\"events\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.968",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import java.text.SimpleDateFormat\ntoDouble: (s: String)Double\ntoInt: (s: String)Int\ntoBigInt: (s: String)BigInt\ninputFormat_ymd: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@ef87e460\noutputFormat_ymd: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@f67a0200\ninputFormat_ym: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@d55c4fe0\noutputFormat_ym: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@d62d344d\ninputFormat_ymdhms: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@88c7dd60\noutputFormat_ymdhms: java.text.SimpleDateFormat \u003d java.text.SimpleDateFormat@e863f5a0\nparse_date: (s: String, inputFormat: java.text.SimpleDateFormat, outputFormat: java.text.SimpleDateFormat)String\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213968_-748898019",
      "id": "20190121-175524_598037471",
      "dateCreated": "2019-01-22 13:30:13.968",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var events \u003d cachedEvents.map(_.split(\"\\t\")).filter(_.length\u003d\u003d61).map(\n    e\u003d\u003e Event(\n        toInt(e(0)),parse_date(e(1), inputFormat_ymd, outputFormat_ymd),parse_date(e(2), inputFormat_ym, outputFormat_ym),toInt(e(3)),toDouble(e(4)),e(5),e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(17),e(18),e(19),e(20),\n        e(21),e(22),e(23),e(24),toInt(e(25)),e(26),e(27),e(28),toInt(e(29)),toDouble(e(30)),toInt(e(31)),toInt(e(32)),toInt(e(33)),toDouble(e(34)),toInt(e(35)),e(36),e(37),e(38),e(39),toDouble(e(40)),\n        toDouble(e(41)),e(42),toInt(e(43)),e(44),e(45),e(46),e(47),toDouble(e(48)),toDouble(e(49)),e(50),toInt(e(51)),e(52),e(53),e(54),e(55),toDouble(e(56)),toDouble(e(57)),e(58),parse_date(e(59),inputFormat_ymdhms, outputFormat_ymdhms),e(60))\n\n).toDF()\n\nevents \u003d events.withColumn(\"SQLDate_date\",$\"SQLDATE\".cast(\"date\"))",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.969",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 59 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 60 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213968_-320383264",
      "id": "20190121-175556_1570822517",
      "dateCreated": "2019-01-22 13:30:13.968",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md # Preprocess on the events DF ",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.969",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003ePreprocess on the events DF\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213969_201940154",
      "id": "20190121-165005_1391737556",
      "dateCreated": "2019-01-22 13:30:13.969",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ## Cameo translation",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.969",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCameo translation\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213969_1409373138",
      "id": "20190121-165029_321139741",
      "dateCreated": "2019-01-22 13:30:13.969",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val Cameolocation \u003d \"/media/storage/gdelt/Cameo\"\nval file_Country \u003d \"CAMEO.country.txt\"\nval file_Ethnic \u003d \"CAMEO.ethnic.txt\"\nval file_Eventcodes \u003d \"CAMEO.eventcodes.txt\"\nval file_Knowngroup \u003d \"CAMEO.knowngroup.txt\"\nval file_Religion \u003d \"CAMEO.religion.txt\"\nval file_Type \u003d \"CAMEO.type.txt\"\nval file_Quad \u003d \"CAMEO.QuadClass.txt\"\nval file_GeoType \u003d \"CAMEO.GeoType.txt\"\nval file_FIPSCountryCode \u003d \"CAMEO.FIPSCountyCode.txt\"",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.970",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Cameolocation: String \u003d /media/storage/gdelt/Cameo\nfile_Country: String \u003d CAMEO.country.txt\nfile_Ethnic: String \u003d CAMEO.ethnic.txt\nfile_Eventcodes: String \u003d CAMEO.eventcodes.txt\nfile_Knowngroup: String \u003d CAMEO.knowngroup.txt\nfile_Religion: String \u003d CAMEO.religion.txt\nfile_Type: String \u003d CAMEO.type.txt\nfile_Quad: String \u003d CAMEO.QuadClass.txt\nfile_GeoType: String \u003d CAMEO.GeoType.txt\nfile_FIPSCountryCode: String \u003d CAMEO.FIPSCountyCode.txt\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213970_-1716209478",
      "id": "20190121-165124_2136866161",
      "dateCreated": "2019-01-22 13:30:13.970",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// creation of the mapping dataset\nval country_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Country)\n\nval ethnic_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Ethnic)\n\nval eventCodes_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Eventcodes)\n\nval group_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Knowngroup)\n\nval religion_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Religion)\n\nval type_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Type)\n\nval quad_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_Quad)\n    \nval geoType_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_GeoType)\n    \nval FIPS_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(Cameolocation+\"/\"+file_FIPSCountryCode)\n    \n",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.970",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "country_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nethnic_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\neventCodes_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\ngroup_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nreligion_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\ntype_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nquad_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\ngeoType_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nFIPS_transco: org.apache.spark.sql.DataFrame \u003d [LABEL: string, CODE: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213970_-547262581",
      "id": "20190121-165205_570025735",
      "dateCreated": "2019-01-22 13:30:13.970",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "FIPS_transco.show()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.971",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+----+\n|               LABEL|CODE|\n+--------------------+----+\n|               ARUBA|  AA|\n| ANTIGUA AND BARBUDA|  AC|\n|UNITED ARAB EMIRATES|  AE|\n|         AFGHANISTAN|  AF|\n|             ALGERIA|  AG|\n|          AZERBAIJAN|  AJ|\n|             ALBANIA|  AL|\n|             ARMENIA|  AM|\n|             ANDORRA|  AN|\n|              ANGOLA|  AO|\n|           ARGENTINA|  AR|\n|           AUSTRALIA|  AS|\n|ASHMORE AND CARTI...|  AT|\n|             AUSTRIA|  AU|\n|            ANGUILLA|  AV|\n|             BAHRAIN|  BA|\n|            BARBADOS|  BB|\n|            BOTSWANA|  BC|\n|             BERMUDA|  BD|\n|             BELGIUM|  BE|\n+--------------------+----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213970_977644897",
      "id": "20190122-103344_852719422",
      "dateCreated": "2019-01-22 13:30:13.970",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "events \u003d events.join(country_transco, events(\"Actor1CountryCode\")\u003d\u003d\u003dcountry_transco(\"CODE\"), \"left\").withColumn(\"Actor1CountryName\", col(\"LABEL\")).drop(country_transco.columns: _*)\nevents \u003d events.join(country_transco, events(\"Actor2CountryCode\")\u003d\u003d\u003dcountry_transco(\"CODE\"), \"left\").withColumn(\"Actor2CountryName\", col(\"LABEL\")).drop(country_transco.columns: _*)\n\nevents \u003d events.join(ethnic_transco, events(\"Actor1EthnicCode\")\u003d\u003d\u003dethnic_transco(\"CODE\"), \"left\").withColumn(\"Actor1EthnicName\", col(\"LABEL\")).drop(ethnic_transco.columns: _*)\nevents \u003d events.join(ethnic_transco, events(\"Actor2EthnicCode\")\u003d\u003d\u003dethnic_transco(\"CODE\"), \"left\").withColumn(\"Actor2EthnicName\", col(\"LABEL\")).drop(ethnic_transco.columns: _*)\n\nevents \u003d events.join(eventCodes_transco, events(\"EventCode\")\u003d\u003d\u003deventCodes_transco(\"CODE\"), \"left\").withColumn(\"EventCodeDesc\", col(\"LABEL\")).drop(eventCodes_transco.columns: _*)\nevents \u003d events.join(eventCodes_transco, events(\"EventBaseCode\")\u003d\u003d\u003deventCodes_transco(\"CODE\"), \"left\").withColumn(\"EventBaseCodeDesc\", col(\"LABEL\")).drop(eventCodes_transco.columns: _*)\nevents \u003d events.join(eventCodes_transco, events(\"EventRootCode\")\u003d\u003d\u003deventCodes_transco(\"CODE\"), \"left\").withColumn(\"EventRootCodeDesc\", col(\"LABEL\")).drop(eventCodes_transco.columns: _*)\n\nevents \u003d events.join(group_transco, events(\"Actor1KnownGroupCode\")\u003d\u003d\u003dgroup_transco(\"CODE\"), \"left\").withColumn(\"Actor1KnownGroupName\", col(\"LABEL\")).drop(group_transco.columns: _*)\nevents \u003d events.join(group_transco, events(\"Actor2KnownGroupCode\")\u003d\u003d\u003dgroup_transco(\"CODE\"), \"left\").withColumn(\"Actor2KnownGroupName\", col(\"LABEL\")).drop(group_transco.columns: _*)\n\nevents \u003d events.join(religion_transco, events(\"Actor1Religion1Code\")\u003d\u003d\u003dreligion_transco(\"CODE\"), \"left\").withColumn(\"Actor1Religion1Name\", col(\"LABEL\")).drop(religion_transco.columns: _*)\nevents \u003d events.join(religion_transco, events(\"Actor1Religion2Code\")\u003d\u003d\u003dreligion_transco(\"CODE\"), \"left\").withColumn(\"Actor1Religion2Name\", col(\"LABEL\")).drop(religion_transco.columns: _*)\nevents \u003d events.join(religion_transco, events(\"Actor2Religion1Code\")\u003d\u003d\u003dreligion_transco(\"CODE\"), \"left\").withColumn(\"Actor2Religion1Name\", col(\"LABEL\")).drop(religion_transco.columns: _*)\nevents \u003d events.join(religion_transco, events(\"Actor2Religion2Code\")\u003d\u003d\u003dreligion_transco(\"CODE\"), \"left\").withColumn(\"Actor2Religion2Name\", col(\"LABEL\")).drop(religion_transco.columns: _*)\n\nevents \u003d events.join(type_transco, events(\"Actor1Type1Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor1Type1Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\nevents \u003d events.join(type_transco, events(\"Actor1Type2Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor1Type2Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\nevents \u003d events.join(type_transco, events(\"Actor1Type3Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor1Type3Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\nevents \u003d events.join(type_transco, events(\"Actor2Type1Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor2Type1Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\nevents \u003d events.join(type_transco, events(\"Actor2Type2Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor2Type2Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\nevents \u003d events.join(type_transco, events(\"Actor2Type3Code\")\u003d\u003d\u003dtype_transco(\"CODE\"), \"left\").withColumn(\"Actor2Type3Name\", col(\"LABEL\")).drop(type_transco.columns: _*)\n\nevents \u003d events.join(quad_transco, events(\"QuadClass\")\u003d\u003d\u003dquad_transco(\"CODE\"), \"left\").withColumn(\"QuadClassType\", col(\"LABEL\")).drop(quad_transco.columns: _*)\n\nevents \u003d events.join(geoType_transco, events(\"Actor1Geo_Type\")\u003d\u003d\u003dgeoType_transco(\"CODE\"), \"left\").withColumn(\"Actor1Geo_Name\", col(\"LABEL\")).drop(geoType_transco.columns: _*)\nevents \u003d events.join(geoType_transco, events(\"Actor2Geo_Type\")\u003d\u003d\u003dgeoType_transco(\"CODE\"), \"left\").withColumn(\"Actor2Geo_Name\", col(\"LABEL\")).drop(geoType_transco.columns: _*)\nevents \u003d events.join(geoType_transco, events(\"ActionGeo_Type\")\u003d\u003d\u003dgeoType_transco(\"CODE\"), \"left\").withColumn(\"ActionGeo_Name\", col(\"LABEL\")).drop(geoType_transco.columns: _*)\n\nevents \u003d events.join(FIPS_transco, events(\"Actor1Geo_CountryCode\")\u003d\u003d\u003dFIPS_transco(\"CODE\"), \"left\").withColumn(\"Actor1Geo_CountryName\", col(\"LABEL\")).drop(FIPS_transco.columns: _*)\nevents \u003d events.join(FIPS_transco, events(\"Actor2Geo_CountryCode\")\u003d\u003d\u003dFIPS_transco(\"CODE\"), \"left\").withColumn(\"Actor2Geo_CountryName\", col(\"LABEL\")).drop(FIPS_transco.columns: _*)\nevents \u003d events.join(FIPS_transco, events(\"ActionGeo_CountryCode\")\u003d\u003d\u003dFIPS_transco(\"CODE\"), \"left\").withColumn(\"ActionGeo_CountryName\", col(\"LABEL\")).drop(FIPS_transco.columns: _*)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.971",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: string ... 86 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213971_282891791",
      "id": "20190121-165736_1049734185",
      "dateCreated": "2019-01-22 13:30:13.971",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md # Query 2 processing",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.971",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eQuery 2 processing\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213971_-349432953",
      "id": "20190121-111706_406896183",
      "dateCreated": "2019-01-22 13:30:13.971",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ## events_by_actor\n",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.972",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eevents_by_actor\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213972_1960875487",
      "id": "20190121-233651_1470040629",
      "dateCreated": "2019-01-22 13:30:13.972",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var events_by_actor1 \u003d  events.select(\"Actor1Name\", \"SQLDATE\", \"GLOBALEVENTID\", \n\"Actor1CountryName\", \"Actor1KnownGroupName\" ,\"Actor1EthnicName\", \"Actor1Religion1Name\", \"Actor1Religion2Name\", \"Actor1Type1Name\", \"Actor1Type2Name\", \"Actor1Type3Name\", \n\"Actor2Name\", \"Actor2CountryName\", \"Actor2KnownGroupName\" ,\"Actor2EthnicName\", \"Actor2Religion1Name\", \"Actor2Religion2Name\", \"Actor2Type1Name\", \"Actor2Type2Name\", \"Actor2Type3Name\", \n\"Actor1Geo_Name\", \"Actor1Geo_FullName\", \"Actor1Geo_CountryName\", \"Actor1Geo_Lat\", \"Actor1Geo_Long\", \n\"Actor2Geo_Name\" , \"Actor2Geo_FullName\", \"Actor2Geo_CountryName\", \"Actor2Geo_Lat\", \"Actor2Geo_Long\",\n\"ActionGeo_Name\",  \"ActionGeo_FullName\",  \"ActionGeo_CountryName\", \"ActionGeo_Lat\", \"ActionGeo_Long\",\n\"EventCodeDesc\" , \"EventBaseCodeDesc\", \"EventRootCodeDesc\", \"QuadClassType\", \"GoldsteinScale\", \"NumMentions\", \"NumSources\", \"NumArticles\", \"AvgTone\", \"SOURCEURL\").\n                        withColumnRenamed(\"Actor1Name\", \"Actor_Name\").\n                        withColumnRenamed(\"SQLDATE\", \"Event_Date\").\n                        withColumnRenamed(\"GLOBALEVENTID\", \"Event_ID\").\n                        withColumnRenamed(\"Actor1CountryName\", \"Actor_Country\").\n                        withColumnRenamed(\"Actor1KnownGroupName\", \"Actor_KnowGroup\").\n                        withColumnRenamed(\"Actor1EthnicName\", \"Actor_EthnicCode\").\n                        withColumnRenamed(\"Actor1Religion1Name\", \"Actor_Religion1\").\n                        withColumnRenamed(\"Actor1Religion2Name\", \"Actor_Religion2\").\n                        withColumnRenamed(\"Actor1Type1Name\", \"Actor_Type1\").\n                        withColumnRenamed(\"Actor1Type2Name\", \"Actor_Type2\").\n                        withColumnRenamed(\"Actor1Type3Name\", \"Actor_Type3\").\n                        withColumnRenamed(\"Actor2Name\", \"Co_Actor_Name\").\n                        withColumnRenamed(\"Actor2CountryName\", \"Co_Actor_Country\").\n                        withColumnRenamed(\"Actor2KnownGroupName\", \"Co_Actor_KnowGroup\").\n                        withColumnRenamed(\"Actor2EthnicName\", \"Co_Actor_EthnicCode\").\n                        withColumnRenamed(\"Actor2Religion1Name\", \"Co_Actor_Religion1\").\n                        withColumnRenamed(\"Actor2Religion2Name\", \"Co_Actor_Religion2\").\n                        withColumnRenamed(\"Actor2Type1Name\", \"Co_Actor_Type1\").\n                        withColumnRenamed(\"Actor2Type2Name\", \"Co_Actor_Type2\").\n                        withColumnRenamed(\"Actor2Type3Name\", \"Co_Actor_Type3\").\n                        withColumnRenamed(\"Actor1Geo_Name\", \"Actor_Event_Type\").\n                        withColumnRenamed(\"Actor1Geo_FullName\", \"Actor_Event_Localisation\").\n                        withColumnRenamed(\"Actor1Geo_CountryName\", \"Actor_Event_Country\").\n                        withColumnRenamed(\"Actor1Geo_Lat\", \"Actor_Event_Lat\").\n                        withColumnRenamed(\"Actor1Geo_Long\", \"Actor_Event_Long\").\n                        withColumnRenamed(\"Actor2Geo_Name\", \"Co_Actor_Event_Type\").\n                        withColumnRenamed(\"Actor2Geo_FullName\", \"Co_Actor_Event_Localisation\").\n                        withColumnRenamed(\"Actor2Geo_CountryName\", \"Co_Actor_Event_Country\").\n                        withColumnRenamed(\"Actor2Geo_Lat\", \"Co_Actor_Event_Lat\").\n                        withColumnRenamed(\"Actor2Geo_Long\", \"Co_Actor_Event_Long\").\n                        withColumnRenamed(\"ActionGeo_Name\", \"Action_Type\").\n                        withColumnRenamed(\"ActionGeo_FullName\", \"Action_Localisation\").\n                        withColumnRenamed(\"ActionGeo_CountryName\", \"Action_Country\").\n                        withColumnRenamed(\"ActionGeo_Lat\", \"Action_Lat\").\n                        withColumnRenamed(\"ActionGeo_Long\", \"Action_Long\").\n                        withColumnRenamed(\"EventCodeDesc\", \"Event_Description\").\n                        withColumnRenamed(\"EventBaseCodeDesc\", \"Event_Base_Description\").\n                        withColumnRenamed(\"EventRootCodeDesc\", \"Event_Root_Description\").\n                        withColumnRenamed(\"QuadClassType\", \"Event_QuadClass\").\n                        withColumnRenamed(\"GoldsteinScale\", \"Event_GoldsteinScale\").\n                        withColumnRenamed(\"NumMentions\", \"Event_NumMentions\").\n                        withColumnRenamed(\"NumSources\", \"Event_NumSources\").\n                        withColumnRenamed(\"NumArticles\", \"Event_Articles\").\n                        withColumnRenamed(\"AvgTone\", \"Event_AvgTone\").\n                        withColumnRenamed(\"SOURCEURL\", \"Event_URL\").\n                        withColumn(\"Action_Performed_by_Actor\", lit(true))\n                        ",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.972",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events_by_actor1: org.apache.spark.sql.DataFrame \u003d [Actor_Name: string, Event_Date: string ... 44 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213972_2120860129",
      "id": "20190121-234245_847631124",
      "dateCreated": "2019-01-22 13:30:13.972",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var events_by_actor2 \u003d  events.select(\"Actor2Name\", \"SQLDATE\", \"GLOBALEVENTID\", \n\"Actor1Name\",\"Actor1CountryName\", \"Actor1KnownGroupName\" ,\"Actor1EthnicName\", \"Actor1Religion1Name\", \"Actor1Religion2Name\", \"Actor1Type1Name\", \"Actor1Type2Name\", \"Actor1Type3Name\", \n\"Actor2CountryName\", \"Actor2KnownGroupName\" ,\"Actor2EthnicName\", \"Actor2Religion1Name\", \"Actor2Religion2Name\", \"Actor2Type1Name\", \"Actor2Type2Name\", \"Actor2Type3Name\", \n\"Actor1Geo_Name\", \"Actor1Geo_FullName\", \"Actor1Geo_CountryName\", \"Actor1Geo_Lat\", \"Actor1Geo_Long\", \n\"Actor2Geo_Name\" , \"Actor2Geo_FullName\", \"Actor2Geo_CountryName\", \"Actor2Geo_Lat\", \"Actor2Geo_Long\",\n\"ActionGeo_Name\",  \"ActionGeo_FullName\",  \"ActionGeo_CountryName\", \"ActionGeo_Lat\", \"ActionGeo_Long\",\n\"EventCodeDesc\" , \"EventBaseCodeDesc\", \"EventRootCodeDesc\", \"QuadClassType\", \"GoldsteinScale\", \"NumMentions\", \"NumSources\", \"NumArticles\", \"AvgTone\", \"SOURCEURL\").\n                        withColumnRenamed(\"Actor2Name\", \"Actor_Name\").\n                        withColumnRenamed(\"SQLDATE\", \"Event_Date\").\n                        withColumnRenamed(\"GLOBALEVENTID\", \"Event_ID\").\n                        withColumnRenamed(\"Actor2CountryName\", \"Actor_Country\").\n                        withColumnRenamed(\"Actor2KnownGroupName\", \"Actor_KnowGroup\").\n                        withColumnRenamed(\"Actor2EthnicName\", \"Actor_EthnicCode\").\n                        withColumnRenamed(\"Actor2Religion1Name\", \"Actor_Religion1\").\n                        withColumnRenamed(\"Actor2Religion2Name\", \"Actor_Religion2\").\n                        withColumnRenamed(\"Actor2Type1Name\", \"Actor_Type1\").\n                        withColumnRenamed(\"Actor2Type2Name\", \"Actor_Type2\").\n                        withColumnRenamed(\"Actor2Type3Name\", \"Actor_Type3\").\n                        withColumnRenamed(\"Actor1Name\", \"Co_Actor_Name\").\n                        withColumnRenamed(\"Actor1CountryName\", \"Co_Actor_Country\").\n                        withColumnRenamed(\"Actor1KnownGroupName\", \"Co_Actor_KnowGroup\").\n                        withColumnRenamed(\"Actor1EthnicName\", \"Co_Actor_EthnicCode\").\n                        withColumnRenamed(\"Actor1Religion1Name\", \"Co_Actor_Religion1\").\n                        withColumnRenamed(\"Actor1Religion2Name\", \"Co_Actor_Religion2\").\n                        withColumnRenamed(\"Actor1Type1Name\", \"Co_Actor_Type1\").\n                        withColumnRenamed(\"Actor1Type2Name\", \"Co_Actor_Type2\").\n                        withColumnRenamed(\"Actor1Type3Name\", \"Co_Actor_Type3\").\n                        withColumnRenamed(\"Actor2Geo_Name\", \"Actor_Event_Type\").\n                        withColumnRenamed(\"Actor2Geo_FullName\", \"Actor_Event_Localisation\").\n                        withColumnRenamed(\"Actor2Geo_CountryName\", \"Actor_Event_Country\").\n                        withColumnRenamed(\"Actor2Geo_Lat\", \"Actor_Event_Lat\").\n                        withColumnRenamed(\"Actor2Geo_Long\", \"Actor_Event_Long\").\n                        withColumnRenamed(\"Actor1Geo_Name\", \"Co_Actor_Event_Type\").\n                        withColumnRenamed(\"Actor1Geo_FullName\", \"Co_Actor_Event_Localisation\").\n                        withColumnRenamed(\"Actor1Geo_CountryName\", \"Co_Actor_Event_Country\").\n                        withColumnRenamed(\"Actor1Geo_Lat\", \"Co_Actor_Event_Lat\").\n                        withColumnRenamed(\"Actor1Geo_Long\", \"Co_Actor_Event_Long\").\n                        withColumnRenamed(\"ActionGeo_Name\", \"Action_Type\").\n                        withColumnRenamed(\"ActionGeo_FullName\", \"Action_Localisation\").\n                        withColumnRenamed(\"ActionGeo_CountryName\", \"Action_Country\").\n                        withColumnRenamed(\"ActionGeo_Lat\", \"Action_Lat\").\n                        withColumnRenamed(\"ActionGeo_Long\", \"Action_Long\").\n                        withColumnRenamed(\"EventCodeDesc\", \"Event_Description\").\n                        withColumnRenamed(\"EventBaseCodeDesc\", \"Event_Base_Description\").\n                        withColumnRenamed(\"EventRootCodeDesc\", \"Event_Root_Description\").\n                        withColumnRenamed(\"QuadClassType\", \"Event_QuadClass\").\n                        withColumnRenamed(\"GoldsteinScale\", \"Event_GoldsteinScale\").\n                        withColumnRenamed(\"NumMentions\", \"Event_NumMentions\").\n                        withColumnRenamed(\"NumSources\", \"Event_NumSources\").\n                        withColumnRenamed(\"NumArticles\", \"Event_Articles\").\n                        withColumnRenamed(\"AvgTone\", \"Event_AvgTone\").\n                        withColumnRenamed(\"SOURCEURL\", \"Event_URL\").\n                        withColumn(\"Action_Performed_by_Actor\", lit(false))",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.972",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events_by_actor2: org.apache.spark.sql.DataFrame \u003d [Actor_Name: string, Event_Date: string ... 44 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213972_1080067845",
      "id": "20190122-110253_1690198557",
      "dateCreated": "2019-01-22 13:30:13.972",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//  Filtetered on empty and null values and year is not 2018\nval events_by_actor1_filtered \u003d events_by_actor1.filter($\"Actor_Name\"  \u003d!\u003d \"\").\n                                            filter(\"Actor_Name is not null\").\n                                            filter($\"Event_Date\"  \u003d!\u003d \"\").\n                                            filter(\"Event_Date is not null\").\n                                            filter(\"Event_ID is not null\").\n                                            filter(year($\"Event_Date\")\u003d\u003d\u003d\"2018\")\n\n\nval events_by_actor2_filtered \u003d events_by_actor2.filter($\"Actor_Name\"  \u003d!\u003d \"\").\n                                            filter(\"Actor_Name is not null\").\n                                            filter($\"Event_Date\"  \u003d!\u003d \"\").\n                                            filter(\"Event_Date is not null\").\n                                            filter(\"Event_ID is not null\").\n                                            filter(year($\"Event_Date\")\u003d\u003d\u003d\"2018\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.973",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events_by_actor1_filtered: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [Actor_Name: string, Event_Date: string ... 44 more fields]\nevents_by_actor2_filtered: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [Actor_Name: string, Event_Date: string ... 44 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213973_159556422",
      "id": "20190122-094928_1162438302",
      "dateCreated": "2019-01-22 13:30:13.973",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "events_by_actor1_filtered.select(\"Actor_Name\",\"Event_Date\",\"Event_ID\").show()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.973",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------+----------+---------+\n|  Actor_Name|Event_Date| Event_ID|\n+------------+----------+---------+\n| SOUTH SUDAN|2018-11-24|806763307|\n|      AFRICA|2018-12-01|806763506|\n|      AFRICA|2018-12-01|806763507|\n|      AFRICA|2018-12-01|806763508|\n|     ALBANIA|2018-12-01|806763509|\n|       DUBAI|2018-12-01|806763510|\n|   ABU DHABI|2018-12-01|806763511|\n|   ARGENTINA|2018-12-01|806763512|\n|   ARGENTINA|2018-12-01|806763513|\n|   ARGENTINA|2018-12-01|806763514|\n|BUENOS AIRES|2018-12-01|806763515|\n|BUENOS AIRES|2018-12-01|806763516|\n|   ARGENTINA|2018-12-01|806763517|\n|BUENOS AIRES|2018-12-01|806763518|\n|   ARGENTINA|2018-12-01|806763519|\n|   ARGENTINA|2018-12-01|806763520|\n|   ARGENTINA|2018-12-01|806763521|\n|   ARGENTINA|2018-12-01|806763522|\n|   ARGENTINA|2018-12-01|806763523|\n|   ARGENTINA|2018-12-01|806763524|\n+------------+----------+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213973_326404724",
      "id": "20190122-120557_1653897460",
      "dateCreated": "2019-01-22 13:30:13.973",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val events_by_actor \u003d events_by_actor1_filtered.union(events_by_actor1_filtered)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.974",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "events_by_actor: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [Actor_Name: string, Event_Date: string ... 44 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213973_1596077346",
      "id": "20190122-113500_184341444",
      "dateCreated": "2019-01-22 13:30:13.973",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "events_by_actor.select(\"Actor_Name\",\"Event_Date\",\"Event_ID\").show()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 13:30:13.974",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------+----------+---------+\n|  Actor_Name|Event_Date| Event_ID|\n+------------+----------+---------+\n| SOUTH SUDAN|2018-11-24|806763307|\n|      AFRICA|2018-12-01|806763506|\n|      AFRICA|2018-12-01|806763507|\n|      AFRICA|2018-12-01|806763508|\n|     ALBANIA|2018-12-01|806763509|\n|       DUBAI|2018-12-01|806763510|\n|   ABU DHABI|2018-12-01|806763511|\n|   ARGENTINA|2018-12-01|806763512|\n|   ARGENTINA|2018-12-01|806763513|\n|   ARGENTINA|2018-12-01|806763514|\n|BUENOS AIRES|2018-12-01|806763515|\n|BUENOS AIRES|2018-12-01|806763516|\n|   ARGENTINA|2018-12-01|806763517|\n|BUENOS AIRES|2018-12-01|806763518|\n|   ARGENTINA|2018-12-01|806763519|\n|   ARGENTINA|2018-12-01|806763520|\n|   ARGENTINA|2018-12-01|806763521|\n|   ARGENTINA|2018-12-01|806763522|\n|   ARGENTINA|2018-12-01|806763523|\n|   ARGENTINA|2018-12-01|806763524|\n+------------+----------+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548160213974_99999101",
      "id": "20190122-120304_229330879",
      "dateCreated": "2019-01-22 13:30:13.974",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "gdeltDatasetEngineering_Events_Q2",
  "id": "2E28DQ63T",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}