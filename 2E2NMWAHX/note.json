{
  "paragraphs": [
    {
      "text": "%md\n## Creation of RDD from Data\nDans ce notebook nous allons charger les données dans des RDD",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.383",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCreation of RDD from Data\u003c/h2\u003e\n\u003cp\u003eDans ce notebook nous allons charger les données dans des RDD\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785383_-1545118708",
      "id": "20181212-102323_67420128",
      "dateCreated": "2019-01-22 12:33:05.383",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.dep\nz.load(\"com.amazonaws:aws-java-sdk:1.3.10\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.384",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@167e0a77\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785384_-85836112",
      "id": "20190121-173833_1225419807",
      "dateCreated": "2019-01-22 12:33:05.384",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport org.apache.spark.sql.functions.{col, min, max, mean, var_pop, count}\nimport java.io.File\nimport scala.io.Source.{fromFile}\nimport java.net.{HttpURLConnection, URL}\nimport scala.language.postfixOps\nimport scala.sys.process._",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.384",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport org.apache.spark.sql.functions.{col, min, max, mean, var_pop, count}\nimport java.io.File\nimport scala.io.Source.fromFile\nimport java.net.{HttpURLConnection, URL}\nimport scala.language.postfixOps\nimport scala.sys.process._\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785384_-583709739",
      "id": "20190121-180038_1381998713",
      "dateCreated": "2019-01-22 12:33:05.384",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val bucket_name \u003d \"du-weijia-telecom-gdelt2018\"\nval AWS_ID \u003d \"AKIAJOZH2VNBCRDJMTFA\" //(1) ID du fichier credentials\nval AWS_KEY \u003d \"dg0JP7o/ycrH566aQpLGmzouqqkpQn2p099Inmow\" //(2) Secret du fichier credentials\nval awsClient \u003d new AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY))\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) \nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) \nsc.hadoopConfiguration.set(\"fs.s3a.connection.maximum\",\"100000\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.385",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "bucket_name: String \u003d du-weijia-telecom-gdelt2018\nAWS_ID: String \u003d AKIAJOZH2VNBCRDJMTFA\nAWS_KEY: String \u003d dg0JP7o/ycrH566aQpLGmzouqqkpQn2p099Inmow\nwarning: there was one deprecation warning; re-run with -deprecation for details\nawsClient: com.amazonaws.services.s3.AmazonS3Client \u003d com.amazonaws.services.s3.AmazonS3Client@9308c8b\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785384_-1859389650",
      "id": "20171217-230735_1688540039",
      "dateCreated": "2019-01-22 12:33:05.384",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Les fichiers sont stockés compressés, on a besoin d\u0027un bout de code pour les décompresser en parallel sur les workers au fur et a mesure qu\u0027on les lit depuis S3:",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.385",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLes fichiers sont stockés compressés, on a besoin d\u0026rsquo;un bout de code pour les décompresser en parallel sur les workers au fur et a mesure qu\u0026rsquo;on les lit depuis S3:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785385_1382031837",
      "id": "20181212-102329_808049084",
      "dateCreated": "2019-01-22 12:33:05.385",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def fileDownloader(urlOfFileToDownload: String, file: File) \u003d {\n    val parentDirName \u003d new File(file.getParent())\n    if (! parentDirName.exists()){\n        parentDirName.mkdirs();\n    }\n    val url \u003d new URL(urlOfFileToDownload)\n    val connection \u003d url.openConnection().asInstanceOf[HttpURLConnection]\n    connection.setConnectTimeout(5000)\n    connection.setReadTimeout(5000)\n    connection.connect()\n    if(connection.getResponseCode \u003e\u003d 400){\n        println(\"error\")\n    }\n    else {\n        url #\u003e file !!\n    }\n}",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.385",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "fileDownloader: (urlOfFileToDownload: String, file: java.io.File)Any\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785385_1923349915",
      "id": "20190121-181413_1774031819",
      "dateCreated": "2019-01-22 12:33:05.385",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def RDDDownloader(fileName: String): org.apache.spark.rdd.RDD[String] \u003d \n{\n    val resultRDD \u003d sc.binaryFiles(fileName). // charger quelques fichers via une regex\n    flatMap {  // decompresser les fichiers\n        case (name: String, content: PortableDataStream) \u003d\u003e\n            try {\n                val zis \u003d new ZipInputStream(content.open)\n                Stream.continually(zis.getNextEntry).\n                    takeWhile(_ !\u003d null).\n                    flatMap { _ \u003d\u003e\n                        val br \u003d new BufferedReader(new InputStreamReader(zis))\n                        Stream.continually(br.readLine()).takeWhile(_ !\u003d null)\n                    }\n            } catch {\n                case e : Exception \u003d\u003e\n                None\n            }\n    }\n    return resultRDD\n}",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.385",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "RDDDownloader: (fileName: String)org.apache.spark.rdd.RDD[String]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785385_-1469237671",
      "id": "20190122-092242_1695948710",
      "dateCreated": "2019-01-22 12:33:05.385",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val local_path \u003d System.getProperty(\"user.dir\")\n\nfileDownloader(\"https://www.gdeltproject.org/data/lookups/CAMEO.knowngroup.txt\", new File(local_path + \"/CAMEO.knowngroup.txt\"))\nnew AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY)).putObject(bucket_name, \"CAMEO.knowngroup.txt\", local_path + \"/CAMEO.knowngroup.txt\")\n\nfileDownloader(\"https://www.gdeltproject.org/data/lookups/CAMEO.country.txt\", new File(local_path + \"/CAMEO.country.txt\"))\nnew AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY)).putObject(bucket_name, \"CAMEO.country.txt\", local_path + \"/CAMEO.country.txt\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.386",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "local_path: String \u003d /mnt/var/lib/zeppelin\nres20: Any \u003d \"\"\nwarning: there was one deprecation warning; re-run with -deprecation for details\nres21: com.amazonaws.services.s3.model.PutObjectResult \u003d com.amazonaws.services.s3.model.PutObjectResult@1bd6dba0\nres22: Any \u003d \"\"\nwarning: there was one deprecation warning; re-run with -deprecation for details\nres23: com.amazonaws.services.s3.model.PutObjectResult \u003d com.amazonaws.services.s3.model.PutObjectResult@4028ce08\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785385_1431922038",
      "id": "20190121-181435_2076071535",
      "dateCreated": "2019-01-22 12:33:05.385",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Export Events\nval eventsRDD \u003d RDDDownloader(\"s3a://\" + bucket_name + \"/events/*.export.CSV.zip\")\nval mentionsRDD \u003d RDDDownloader(\"s3a://\" + bucket_name + \"/mentions/*.CSV.zip\")",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.386",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "eventsRDD: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[14] at flatMap at \u003cconsole\u003e:43\nmentionsRDD: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[16] at flatMap at \u003cconsole\u003e:43\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785386_-1273960123",
      "id": "20190121-175851_504012144",
      "dateCreated": "2019-01-22 12:33:05.386",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val cachedEvents \u003d eventsRDD.cache // RDD\nval cachedMentions \u003d mentionsRDD.cache",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.386",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "cachedEvents: eventsRDD.type \u003d MapPartitionsRDD[14] at flatMap at \u003cconsole\u003e:43\ncachedMentions: mentionsRDD.type \u003d MapPartitionsRDD[16] at flatMap at \u003cconsole\u003e:43\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785386_-1208407737",
      "id": "20190107-102856_946427568",
      "dateCreated": "2019-01-22 12:33:05.386",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class Event(GLOBALEVENTID: Int,\nSQLDATE: Int,\nMonthYear: Int,\nYear: Int,\nFractionDate: Double,\nActor1Code: String,\nActor1Name: String,\nActor1CountryCode: String,\nActor1KnownGroupCode: String,\nActor1EthnicCode: String,\nActor1Religion1Code: String,\nActor1Religion2Code: String,\nActor1Type1Code: String,\nActor1Type2Code: String,\nActor1Type3Code: String,\nActor2Code: String,\nActor2Name: String,\nActor2CountryCode: String,\nActor2KnownGroupCode: String,\nActor2EthnicCode: String,\nActor2Religion1Code: String,\nActor2Religion2Code: String,\nActor2Type1Code: String,\nActor2Type2Code: String,\nActor2Type3Code: String,\nIsRootEvent: Int,\nEventCode: String,\nEventBaseCode: String,\nEventRootCode: String,\nQuadClass: Int,\nGoldsteinScale: Double,\nNumMentions: Int,\nNumSources: Int,\nNumArticles: Int,\nAvgTone: Double,\nActor1Geo_Type: Int,\nActor1Geo_FullName: String,\nActor1Geo_CountryCode: String,\nActor1Geo_ADM1Code: String,\nActor1Geo_ADM2Code: String,\nActor1Geo_Lat: Double,\nActor1Geo_Long: Double,\nActor1Geo_FeatureID: String,\nActor2Geo_Type: Int,\nActor2Geo_FullName: String,\nActor2Geo_CountryCode: String,\nActor2Geo_ADM1Code: String,\nActor2Geo_ADM2Code: String,\nActor2Geo_Lat: Double,\nActor2Geo_Long: Double,\nActor2Geo_FeatureID: String,\nActionGeo_Type: Int,\nActionGeo_FullName: String,\nActionGeo_CountryCode: String,\nActionGeo_ADM1Code: String,\nActionGeo_ADM2Code: String,\nActionGeo_Lat: Double,\nActionGeo_Long: Double,\nActionGeo_FeatureID: String,\nDATEADDED: BigInt,\nSOURCEURL: String)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.386",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class Event\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785386_453807879",
      "id": "20190107-095023_1048093380",
      "dateCreated": "2019-01-22 12:33:05.386",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class Mention(GLOBALEVENTID: Int,\nEventTimeDate: BigInt,\nMentionTimeDate: BigInt,\nMentionType: Int,\nMentionSourceName: String,\nMentionIdentifier: String,\nSentenceID: Int,\nActor1CharOffset: Int,\nActor2CharOffset: Int,\nActionCharOffset: Int,\nInRawText: Int,\nConfidence: Int,\nMentionDocLen: Int,\nMentionDocTone: Double,\nMentionDocTranslationInfo: String)//,\n//Extras: String)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.386",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class Mention\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785386_-905698433",
      "id": "20190109-085959_371186108",
      "dateCreated": "2019-01-22 12:33:05.386",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def toStrings(s : String): String \u003d if (s.isEmpty) null else s\n\ndef toDouble(s : String): Double \u003d {\n    if (s.isEmpty) 0  \n    else {\n        try {\n            s.toDouble\n        } catch {\n            case e: Exception \u003d\u003e 0\n        }\n    }\n}\n\ndef toInt(s : String): Int \u003d {\n    if (s.isEmpty) 0  \n    else {\n        try {\n            s.toInt\n        } catch {\n            case e: Exception \u003d\u003e 0\n        }\n    }\n}\n\ndef toBigInt(s : String): BigInt \u003d {\n    if (s.isEmpty) BigInt(0) \n    else {\n        try {\n            BigInt(s)\n        } catch {\n            case e: Exception \u003d\u003e BigInt(0) \n        }\n    }\n}",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.387",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "toStrings: (s: String)String\ntoDouble: (s: String)Double\ntoInt: (s: String)Int\ntoBigInt: (s: String)BigInt\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785386_1646636719",
      "id": "20190121-175531_232057282",
      "dateCreated": "2019-01-22 12:33:05.386",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var events \u003d cachedEvents.map(_.split(\"\\t\")).filter(_.length\u003d\u003d61).map(\n    e\u003d\u003e Event(\n        toInt(e(0)),toInt(e(1)),toInt(e(2)),toInt(e(3)),toDouble(e(4)),toStrings(e(5)),toStrings(e(6)),toStrings(e(7)),toStrings(e(8)),toStrings(e(9)),toStrings(e(10)),toStrings(e(11)),toStrings(e(12)),\n        toStrings(e(13)),toStrings(e(14)),toStrings(e(15)),toStrings(e(16)),toStrings(e(17)),toStrings(e(18)),toStrings(e(19)),toStrings(e(20)),toStrings(e(21)),toStrings(e(22)),toStrings(e(23)),toStrings(e(24)),\n        toInt(e(25)),toStrings(e(26)),toStrings(e(27)),toStrings(e(28)),toInt(e(29)),toDouble(e(30)),toInt(e(31)),toInt(e(32)),toInt(e(33)),toDouble(e(34)),toInt(e(35)),toStrings(e(36)),toStrings(e(37)),\n        toStrings(e(38)),toStrings(e(39)),toDouble(e(40)),toDouble(e(41)),toStrings(e(42)),toInt(e(43)),toStrings(e(44)),toStrings(e(45)),toStrings(e(46)),toStrings(e(47)),toDouble(e(48)),toDouble(e(49)),\n        toStrings(e(50)),toInt(e(51)),toStrings(e(52)),toStrings(e(53)),toStrings(e(54)),toStrings(e(55)),toDouble(e(56)),toDouble(e(57)),e(58),toBigInt(e(59)),toStrings(e(60)))\n\n).toDF()\n\nval group_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(\"s3n://\" + bucket_name + \"/CAMEO.knowngroup.txt\")\n    \nevents \u003d events.join(group_transco, events(\"Actor1KnownGroupCode\")\u003d\u003d\u003dgroup_transco(\"CODE\"), \"left\").withColumn(\"Actor1KnownGroupName\", col(\"LABEL\")).drop(df.columns: _*)\nevents \u003d events.join(group_transco, events(\"Actor2KnownGroupCode\")\u003d\u003d\u003dgroup_transco(\"CODE\"), \"left\").withColumn(\"Actor2KnownGroupName\", col(\"LABEL\")).drop(df.columns: _*)\n\nval country_transco \u003d spark.read.\n    format(\"csv\").\n    option(\"header\", true).\n    option(\"delimiter\", \"\\t\").\n    load(\"s3n://\" + bucket_name + \"/CAMEO.country.txt\")\n    \nevents \u003d events.join(country_transco, events(\"Actor1CountryCode\")\u003d\u003d\u003dcountry_transco(\"CODE\"), \"left\").withColumn(\"Actor1CountryName\", col(\"LABEL\")).drop(df.columns: _*)\nevents \u003d events.join(country_transco, events(\"Actor2CountryCode\")\u003d\u003d\u003dcountry_transco(\"CODE\"), \"left\").withColumn(\"Actor2CountryName\", col(\"LABEL\")).drop(df.columns: _*)",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.387",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "toStrings: (s: String)String\ntoDouble: (s: String)Double\ntoInt: (s: String)Int\ntoBigInt: (s: String)BigInt\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\ngroup_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: int ... 60 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: int ... 61 more fields]\ncountry_transco: org.apache.spark.sql.DataFrame \u003d [CODE: string, LABEL: string]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: int ... 62 more fields]\nevents: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, SQLDATE: int ... 63 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785387_-170008034",
      "id": "20190107-095130_1656507834",
      "dateCreated": "2019-01-22 12:33:05.387",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val mentions \u003d \ncachedMentions.map(_.split(\"\\t\")).filter(_.length\u003d\u003d15).map(\n    e\u003d\u003e Mention(\n        toInt(e(0)),toBigInt(e(1)),toBigInt(e(2)),toInt(e(3)),toStrings(e(4)),toStrings(e(5)),toInt(e(6)),toInt(e(7)),toInt(e(8)),toInt(e(9)),toInt(e(10)),toInt(e(11)),toInt(e(12)),toDouble(e(13)),toStrings(e(14)))\n\n).toDF()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.387",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "mentions: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, EventTimeDate: decimal(38,0) ... 13 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785387_-286446045",
      "id": "20190109-093906_657341265",
      "dateCreated": "2019-01-22 12:33:05.387",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "mentions.count()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.387",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.spark.SparkException: Job aborted due to stage failure: Task 5 in stage 2.0 failed 4 times, most recent failure: Lost task 5.3 in stage 2.0 (TID 127, ip-172-31-47-123.eu-west-1.compute.internal, executor 13): ExecutorLostFailure (executor 13 exited caused by one of the running tasks) Reason: Container marked as failed: container_1548145873041_0001_01_000014 on host: ip-172-31-47-123.eu-west-1.compute.internal. Exit status: 137. Diagnostics: Container killed on request. Exit code is 137\nContainer exited with a non-zero exit code 137\nKilled by external signal\n\nDriver stacktrace:\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:2039)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2027)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2026)\n  at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n  at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:2026)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:966)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:966)\n  at scala.Option.foreach(Option.scala:257)\n  at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:966)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2260)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2209)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2198)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:777)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2061)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2082)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2101)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2126)\n  at org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:945)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\n  at org.apache.spark.rdd.RDD.collect(RDD.scala:944)\n  at org.apache.spark.sql.execution.SparkPlan.executeCollect(SparkPlan.scala:299)\n  at org.apache.spark.sql.Dataset$$anonfun$count$1.apply(Dataset.scala:2831)\n  at org.apache.spark.sql.Dataset$$anonfun$count$1.apply(Dataset.scala:2830)\n  at org.apache.spark.sql.Dataset$$anonfun$53.apply(Dataset.scala:3365)\n  at org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:78)\n  at org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:125)\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:73)\n  at org.apache.spark.sql.Dataset.withAction(Dataset.scala:3364)\n  at org.apache.spark.sql.Dataset.count(Dataset.scala:2830)\n  ... 54 elided\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785387_1768292346",
      "id": "20190121-175558_1688307728",
      "dateCreated": "2019-01-22 12:33:05.387",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val tableA \u003d events.filter(\"Actor1Code is not null or Actor1CountryName is not null or Actor1KnownGroupName is not null\").select(\"SQLDATE\", \"Actor1Code\", \"Actor1CountryName\", \"Actor1KnownGroupName\", \"GLOBALEVENTID\")\n\nval tableM \u003d mentions.select(\"GLOBALEVENTID\", \"MentionDocTone\")\n\nval actor_final \u003d tableA.\n    join(tableB, \"GLOBALEVENTID\").\n    groupBy(\"GLOBALEVENTID\").\n    agg(max(col(\"SQLDATE\")),max(col(\"Actor1Code\")),max(col(\"Actor1CountryName\")),max(col(\"Actor1KnownGroupName\")),var_pop(col(\"MentionDocTone\")), count(col(\"GLOBALEVENTID\"))).\n    toDF(\"GLOBALEVENTID\",\"DATE\",\"ACTOR\",\"COUNTRY\",\"ORGANIZATION\",\"VARIANCE\",\"NB_ARTICLE\").\n    select(\"DATE\",\"ACTOR\",\"COUNTRY\",\"ORGANIZATION\",\"GLOBALEVENTID\", \"VARIANCE\",\"NB_ARTICLE\").\n    sort(asc(\"DATE\"), asc(\"ACTOR\"), asc(\"COUNTRY\"), asc(\"ORGANIZATION\"), asc(\"GLOBALEVENTID\"))",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.387",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "tableA: org.apache.spark.sql.DataFrame \u003d [SQLDATE: int, Actor1Code: string ... 3 more fields]\ntableM: org.apache.spark.sql.DataFrame \u003d [GLOBALEVENTID: int, MentionDocTone: double]\nactor_final: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [DATE: int, ACTOR: string ... 5 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785387_-1164641131",
      "id": "20190120-141203_1996331037",
      "dateCreated": "2019-01-22 12:33:05.387",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "actor_final.show()",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.388",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+------+--------------------+------------+-------------+--------------------+----------+\n|    DATE| ACTOR|             COUNTRY|ORGANIZATION|GLOBALEVENTID|            VARIANCE|NB_ARTICLE|\n+--------+------+--------------------+------------+-------------+--------------------+----------+\n|20170218|   BUS|                null|        null|    731960710|                 0.0|         1|\n|20170218|   BUS|                null|        null|    731962367|                 0.0|         1|\n|20170218|   BUS|                null|        null|    731962368|                 0.0|         1|\n|20170218|   BUS|                null|        null|    731964204|                 0.0|         1|\n|20170218|   CHN|               China|        null|    731960711|                 0.0|         1|\n|20170218|   GOV|                null|        null|    731964205|0.016999395602734182|         3|\n|20170218|   GOV|                null|        null|    731967697|                 0.0|         1|\n|20170218|   LAB|                null|        null|    731962369|                 0.0|         1|\n|20170218|MNCKOR|         South Korea|        null|    731967698|                 0.0|         1|\n|20170218|   RUS|              Russia|        null|    731960712|                 0.0|         1|\n|20170219|   AFG|         Afghanistan|        null|    732045994| 0.08621323853451052|         3|\n|20170219|AGOMED|              Angola|        null|    732045995|                 0.0|         1|\n|20170219|   ARE|United Arab Emirates|        null|    732148677|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    731990663|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    732037434|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    732113544|                 0.0|         2|\n|20170219|   ARG|           Argentina|        null|    732187741|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    732215473|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    732215474|                 0.0|         1|\n|20170219|   ARG|           Argentina|        null|    732215475|                 0.0|         1|\n+--------+------+--------------------+------------+-------------+--------------------+----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1548156785387_771600901",
      "id": "20190120-142548_1909073270",
      "dateCreated": "2019-01-22 12:33:05.387",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Partition Key : Jour, Mois, Année (SQLDATE)\n// Clustering Column(s) : ACTOR, COUNTRY, ORGANIZATION, GLOBALEVENTID\n// Value(s) : VARIANCE, NB_ARTICLE\n\n// SELECT ACTOR, SUM(NB_ARTICLE * VARIANCE)/SUM(NB_ARTICLE) AS MEAN FROM TABLE WHERE ACTOR  GROUP BY ACTOR ORDER BY MEAN DESC",
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.388",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1548156785388_1549394570",
      "id": "20190113-134614_1085664168",
      "dateCreated": "2019-01-22 12:33:05.388",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "dateUpdated": "2019-01-22 12:33:05.388",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1548156785388_-683925214",
      "id": "20190120-164044_87848048",
      "dateCreated": "2019-01-22 12:33:05.388",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "gdeltDatasetEngineering_PP",
  "id": "2E2NMWAHX",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}